% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunked_list.R
\name{ChunkedList}
\alias{ChunkedList}
\title{ChunkedList R6 Class}
\value{
A new ChunkedList object.
}
\description{
ChunkedList R6 Class

ChunkedList R6 Class
}
\details{
A flexible, chunked list implementation using R6 class system, allowing for efficient
dynamic list resizing and element access.
}
\examples{

## ------------------------------------------------
## Method `ChunkedList$add_many`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
myChunkedList$add_many(list(12, 13, 14))

## ------------------------------------------------
## Method `ChunkedList$get_at_index`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
myChunkedList$add(12)
myChunkedList$get_at_index(1)

## ------------------------------------------------
## Method `ChunkedList$size`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
myChunkedList$size()

## ------------------------------------------------
## Method `ChunkedList$actualSize`
## ------------------------------------------------

myChunkedList$actualSize()

## ------------------------------------------------
## Method `ChunkedList$get_all`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
myChunkedList$get_all()

## ------------------------------------------------
## Method `ChunkedList$print`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
myChunkedList$print()

## ------------------------------------------------
## Method `ChunkedList$iterator`
## ------------------------------------------------

myChunkedList <- ChunkedList$new()
iterator <- myChunkedList$iterator()
element <- iterator$get_next()
while (!is.null(element)) {
  print(element)
  element <- iterator$get_next()
}
iterator$reset()

## ------------------------------------------------
## Method `ChunkedList$equals`
## ------------------------------------------------

element <- iterator$get_next()
iterator$reset()
myChunkedList <- ChunkedList$new()
myChunkedList$add("Hello")
otherChunkedList <- ChunkedList$new()
otherChunkedList$add("Hello")
myChunkedList$equals(otherChunkedList)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{data}}{A list to store the data elements.}

\item{\code{max_chunk_size}}{The maximum size each chunk can grow to.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChunkedList-new}{\code{ChunkedList$new()}}
\item \href{#method-ChunkedList-add}{\code{ChunkedList$add()}}
\item \href{#method-ChunkedList-add_many}{\code{ChunkedList$add_many()}}
\item \href{#method-ChunkedList-get_at_index}{\code{ChunkedList$get_at_index()}}
\item \href{#method-ChunkedList-size}{\code{ChunkedList$size()}}
\item \href{#method-ChunkedList-actualSize}{\code{ChunkedList$actualSize()}}
\item \href{#method-ChunkedList-get_all}{\code{ChunkedList$get_all()}}
\item \href{#method-ChunkedList-print}{\code{ChunkedList$print()}}
\item \href{#method-ChunkedList-iterator}{\code{ChunkedList$iterator()}}
\item \href{#method-ChunkedList-equals}{\code{ChunkedList$equals()}}
\item \href{#method-ChunkedList-clone}{\code{ChunkedList$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-new"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new ChunkedList object with optional initial data and size parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$new(
  initial_data = NULL,
  initial_size = 10,
  chunk_size = 10,
  max_chunk_size = 1000
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_data}}{Initial data to populate the ChunkedList.}

\item{\code{initial_size}}{Initial size of the ChunkedList.}

\item{\code{chunk_size}}{Size of the chunks for dynamic resizing.}

\item{\code{max_chunk_size}}{Maximum size of any chunk in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-add"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-add}{}}}
\subsection{Method \code{add()}}{
Adds a single element to the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$add(element)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element}}{The element to add to the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-add_many"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-add_many}{}}}
\subsection{Method \code{add_many()}}{
Adds multiple elements to the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$add_many(list_of_elements)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list_of_elements}}{A list of elements to add to the ChunkedList.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ChunkedList with the added elements.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$add_many(list(12, 13, 14))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-get_at_index"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-get_at_index}{}}}
\subsection{Method \code{get_at_index()}}{
Retrieves an element at a specified index.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$get_at_index(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{The index of the element to retrieve.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The element at the specified index.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$add(12)
myChunkedList$get_at_index(1)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-size"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-size}{}}}
\subsection{Method \code{size()}}{
Returns the number of elements in the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The number of elements in the ChunkedList.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$size()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-actualSize"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-actualSize}{}}}
\subsection{Method \code{actualSize()}}{
Returns the actual allocated size of the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$actualSize()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The actual allocated size of the ChunkedList.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList$actualSize()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-get_all"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-get_all}{}}}
\subsection{Method \code{get_all()}}{
Retrieves all non-NULL elements from the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$get_all()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of all non-NULL elements in the ChunkedList.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$get_all()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-print"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-print}{}}}
\subsection{Method \code{print()}}{
Prints the contents of the ChunkedList.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
invisible(self)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$print()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-iterator"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-iterator}{}}}
\subsection{Method \code{iterator()}}{
Provides an iterator for the ChunkedList to traverse elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$iterator()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An iterator object with \code{next} and \code{reset} functions.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
iterator <- myChunkedList$iterator()
element <- iterator$get_next()
while (!is.null(element)) {
  print(element)
  element <- iterator$get_next()
}
iterator$reset()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-equals"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-equals}{}}}
\subsection{Method \code{equals()}}{
Retrieves the next element in the ChunkedList.


Resets the iterator to the beginning of the ChunkedList.


Compares the ChunkedList with another ChunkedList for equality.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$equals(other)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{other}}{Another ChunkedList object to compare against.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the two ChunkedLists are equal, FALSE otherwise.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{element <- iterator$get_next()
}
\if{html}{\out{</div>}}

\if{html}{\out{<div class="r example copy">}}
\preformatted{iterator$reset()
}
\if{html}{\out{</div>}}

\if{html}{\out{<div class="r example copy">}}
\preformatted{myChunkedList <- ChunkedList$new()
myChunkedList$add("Hello")
otherChunkedList <- ChunkedList$new()
otherChunkedList$add("Hello")
myChunkedList$equals(otherChunkedList)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChunkedList-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChunkedList-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChunkedList$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
